#!/usr/bin/env python3
# -*- coding: utf-8 -*-

def getMembershipService(service):
    """
    Define the membership functions for the service input
    """
    degree = {}
    if service <= 2:
        degree["poor"] = 1
        degree["fair"] = 0
        degree["good"] = 0
    elif service > 2 and service <= 4:
        degree["poor"] = float((4 - service) * (1 / (4 - 2)))
        degree["fair"] = float((service - 2) * (1 / (4 - 2)))
        degree["good"] = 0
    elif service > 4 and service <= 8:
        degree["poor"] = 0
        degree["fair"] = float((8 - service) * (1 / (8 - 4)))
        degree["good"] = float((service - 4) * (1 / (8 - 4)))
    elif service > 8 and service <= 10:
        degree["poor"] = 0
        degree["fair"] = 0
        degree["good"] = 1
    return degree


def getMembershipFood(food):
    """
    Define the membership functions for the food input
    """
    degree = {}
    if food < 0 or food > 1:
        degree["bad"] = 0
        degree["delicious"] = 0
    elif food <= .4:
        degree["bad"] = 1
        degree["delicious"] = 0
    elif food > .4 and food < .8:
        degree["bad"] = float((.8 - food) * (1 / (.8 - .4)))
        degree["delicious"] = float((food - .4) * (1 / (.8 - .4)))
    elif food >= .8 and food <= 1:
        degree["bad"] = 0
        degree["delicious"] = 1
    return degree


def crispInput(val, base):
    """
    Convert the input values into crisp values
    """
    return val * (1.0 / (base - 1))


def ruleEvalationAssessment(service, food):
    """
    Evaluate the rules based on the fuzzy logic rules and generate fuzzy sets for cheap, average, and generous
    """
    cheap = max(min(getMembershipService(service)["poor"], getMembershipFood(food)["bad"]), 0)
    average = max(min(getMembershipService(service)["fair"], getMembershipFood(food)["delicious"]), 0)
    generous = max(min(getMembershipService(service)["good"], getMembershipFood(food)["delicious"]), 0)
    return cheap, average, generous


def defuzzificationAssessment(cheap, average, generous):
    """
    Defuzzify the fuzzy sets generated by the ruleEvalationAssessment() function using the Center of Gravity (COG) method
    """
    numerator = cheap * 2.5 + average * 5 + generous * 7.5
    denominator = cheap + average + generous
    if denominator == 0:
        return 0
    else:
        return numerator / denominator


# input
service, food = 6, 3

s = crispInput(service, 10)
f = crispInput(food, 1)

fuzzy_service = getMembershipService(s)
fuzzy_food = getMembershipFood(f)

cheap, average, generous = ruleEvalationAssessment(s, f)

con_assessment = defuzzificationAssessment(cheap, average, generous)